(* This is a ProVerif description of the Protocol Flow from the SISSI architecture. *)

(* START keys *)
type SecretKey.
type PublicKey.
fun pk(SecretKey):PublicKey.
(* END keys *)

(* START asymmetric encryption *)
fun aenc(bitstring(*the message*), PublicKey):bitstring (*asymmetric encrypt input msg*).
reduc forall msg:bitstring,sk:SecretKey; adec(aenc(msg,pk(sk)),sk)=msg (*asymmetric decrypt*).
(* END Asymmetric encryption *)

(* START digital signature *)
fun sig(bitstring(*the message*), SecretKey):bitstring(*the signature value*).
reduc forall msg:bitstring,sk:SecretKey; check(msg,sig(msg,sk),pk(sk))=true (*check(msg,sigVal,pk)*).
(* END digital signature *)

(*DEFS*)

(* Communication *)
free h:channel.

free Client_Completes:bitstring [private].
free Server_Completes:bitstring [private].

(* Agreement Events *)
event auth_ClientSendsLastMessageToServer(bitstring,bitstring,bitstring).
event auth_ServerCompletesProtocol(bitstring,bitstring,bitstring).

event auth_ServerSendsLastMessageToClient(bitstring,bitstring,bitstring,bitstring).
event auth_ClientCompletesProtocol(bitstring,bitstring,bitstring,bitstring).



(* START process macros ~ agent *)

(** START Client **)
let client(sk:SecretKey, pk_s:PublicKey, talksOnlyToHonest:bool) (* input ~ what the agent starts with in private*) =

(* TODO do stuff *)
    new m_uri:bitstring;
	let m_0:bitstring = m_uri in
    out(h,m_0);

    in(h,m_1:bitstring);
    let (m_shape:bitstring, sig_shape:bitstring, m_Aoffer:bitstring, sig_Aoffer:bitstring, m_Brequest:bitstring, sig_Brequest:bitstring) = m_1 in
	(* signature check?? *)
	let m_presentation:bitstring = m_shape in
	let sig_presentation:bitstring = sig(m_presentation, sk) in
	let m_Aagreement:bitstring = m_Aoffer in
	let sig_Aagreement_client:bitstring = sig(m_Aagreement, sk) in
	let m_Brequirement:bitstring = m_Brequest in
	let sig_Brequirement:bitstring = sig(m_Brequirement, sk) in
	let m_2:bitstring = (m_0, m_presentation, sig_presentation, m_Aagreement, sig_Aagreement_client, m_Brequirement, sig_Brequirement) in
    event auth_ClientSendsLastMessageToServer(m_0, m_1, m_2);
	out(h,m_2);

	in(h,m_3:bitstring);
	let (m'_uri:bitstring, m_resource:bitstring, m_Bagreement:bitstring, sig_Bagreement:bitstring, m'_Aagreement:bitstring, sig'_Aagreement_client:bitstring, sig_Aagreement_server:bitstring) = m_3 in
	if m_Brequirement = m_Bagreement then
	if m_Aagreement = m'_Aagreement then
	if sig_Aagreement_client = sig'_Aagreement_client then
	if m_uri = m'_uri then

	if check(m_Bagreement, sig_Bagreement, pk_s) then
	if check((m'_Aagreement, sig'_Aagreement_client), sig_Aagreement_server, pk_s) then

    (* Client about to complete protocol! *)
    out(h, Client_Completes);
    if talksOnlyToHonest then
    (* event_at_the_very_end_of_role_R *)
    event auth_ClientCompletesProtocol(m_0, m_1, m_2, m_3) ;
    0.
(** END Client **)

(** START Server **)
let server(sk:SecretKey, pk_c:PublicKey, talksOnlyToHonest:bool) (* input ~ what the agent starts with in private*) =

(* TODO do stuff *)
    in(h,m_0:bitstring);
	(* check if public *)
	new m_shape:bitstring;
	let sig_shape:bitstring = sig(m_shape, sk) in
	new m_Aoffer:bitstring;
	let sig_Aoffer:bitstring = sig(m_Aoffer, sk) in
	new m_Brequest:bitstring;
	let sig_Brequest:bitstring = sig(m_Brequest, sk) in
    let m_1:bitstring = (m_shape, sig_shape, m_Aoffer, sig_Aoffer, m_Brequest, sig_Brequest) in
    out(h,m_1);

    in(h,m_2:bitstring);
	let (m_0:bitstring, m_presentation:bitstring, sig_presentation:bitstring, m_Aagreement:bitstring, sig_Aagreement_client:bitstring, m_Brequirement:bitstring, sig_Brequirement:bitstring) = m_2 in
	if m_Aoffer = m_Aagreement then
	if check(m_Aagreement, sig_Aagreement_client, pk_c) then
	if m_Brequest = m_Brequirement then
	if check(m_Brequirement, sig_Brequirement, pk_c) then
	if m_shape = m_presentation then
	if check(m_presentation, sig_presentation, pk_c) then

	new m_resource:bitstring;
	let m_Bagreement:bitstring = m_Brequirement in
	let sig_Bagreement = sig(m_Bagreement, sk) in
	let sig_Aagreement_server = sig((m_Aagreement, sig_Aagreement_client), sk) in
	let m_3:bitstring = (m_0, m_resource, m_Bagreement, sig_Bagreement, m_Aagreement, sig_Aagreement_client, sig_Aagreement_server) in
	event auth_ServerSendsLastMessageToClient(m_0, m_1, m_2, m_3);
	out (h,m_3);

    (* Server about to complete the protocol *)
    out(h, Server_Completes);
    if talksOnlyToHonest then
    (* event_at_the_very_end_of_role_R *)
    event auth_ServerCompletesProtocol(m_0,m_1,m_2);
    0.
(** END Server **)

(* END process macros *)

(* "Do the processes complete?" - sanity check*)
query attacker(Client_Completes).
query attacker(Server_Completes).


(* Checking for "Agreement" *)

(*
event_at_the_very_end_of_role_R
==>
event_just_before_the_last_send_message_of_S
*)

query msg_0:bitstring, msg_1:bitstring, msg_2:bitstring, msg_3:bitstring;
    event(auth_ClientCompletesProtocol(msg_0,msg_1,msg_2,msg_3))
    ==>
    event(auth_ServerSendsLastMessageToClient(msg_0,msg_1,msg_2,msg_3)) .


query msg_0:bitstring, msg_1:bitstring, msg_2:bitstring;
    event(auth_ServerCompletesProtocol(msg_0,msg_1,msg_2))
    ==>
    event(auth_ClientSendsLastMessageToServer(msg_0,msg_1,msg_2)) .




(* MAIN *)

free sk_e:SecretKey.

process (*use root process for setup *)
   	(*declare secret keys*)
    new sk_c:SecretKey;
    new sk_s:SecretKey;
    (*advertise public keys*)
    out(h,pk(sk_c));
    out(h,pk(sk_s));
    (*let agents dance*)
    ( (
         !client   (sk_c, pk(sk_s), true)
       | !client   (sk_c, pk(sk_e), false)
       | !server   (sk_s, pk(sk_c), true)
       | !server   (sk_s, pk(sk_e), false)
       (* dishonest clients and dishonest servers are impersonated by "the attacker" *)
    ) )

	