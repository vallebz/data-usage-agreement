(* This is a ProVerif description of the Protocol Flow from the Verifiable Consent architecture. *)

(* START keys *)
type SecretKey.
type PublicKey.
type SymmetricKey.
fun pk(SecretKey):PublicKey.
(* END keys *)

(* START group *)
type G.
type exponent.
fun exp(G, exponent): G.
fun g(exponent): G.
equation forall x: exponent, y: exponent; exp(g(x),y) = exp(g(y),x).
fun GtoSymK(G): SymmetricKey.
fun bitG(G):bitstring.
reduc forall elem:G; unbitG(bitG(elem))=elem.
(* END group *)

(*(* START symmetric encryption *)
fun enc(bitstring(*the message*), SymmetricKey):bitstring (*symmetric encrypt input msg*).
reduc forall msg:bitstring,symk:SymmetricKey; dec(enc(msg,symk),symk)=msg (*symmetric decrypt*).
(* END symmetric encryption *)*)

(* START asymmetric encryption *)
fun aenc(bitstring(*the message*), PublicKey):bitstring (*asymmetric encrypt input msg*).
reduc forall msg:bitstring,sk:SecretKey; adec(aenc(msg,pk(sk)),sk)=msg (*asymmetric decrypt*).
(* END Asymmetric encryption *)

(* START digital signature *)
fun sig(bitstring(*the message*), SecretKey):bitstring(*the signature value*).
reduc forall msg:bitstring,sk:SecretKey; check(msg,sig(msg,sk),pk(sk))=true (*check(msg,sigVal,pk)*).
(* END digital signature *)

(*DEFS*)

(* Communication *)
free h:channel.

free Client_Completes:bitstring [private].
free Server_Completes:bitstring [private].

(* Agreement Events *)
event auth_ClientSendsLastMessageToServer(bitstring,bitstring,bitstring).
event auth_ServerCompletesProtocol(bitstring,bitstring,bitstring).

event auth_ServerSendsLastMessageToClient(bitstring,bitstring,bitstring,bitstring).
event auth_ClientCompletesProtocol(bitstring,bitstring,bitstring,bitstring).

event clientReceivedResource(bitstring,bitstring,bitstring).
event serverHasAgreed(bitstring,bitstring,bitstring).
event clientHasAgreed(bitstring,bitstring,bitstring).
event serverHasOffered(bitstring,bitstring,bitstring).




(* START process macros ~ agent *)

(** START Client **)
let client(sk_c:SecretKey, pk_s:PublicKey, talksOnlyToHonest:bool) (* input ~ what the agent starts with in private*) =

    new m_uri:bitstring;
    new nonce_0:bitstring;
    let m'_0 = (nonce_0, m_uri, pk_s, pk(sk_c)) in
    let m_0 = aenc(m'_0, pk_s) in
    out(h,m_0);
    (* Sent out data request (enc) *)
    (**)
    (**)
    (* Receive data usage offer (enc) *)
    in(h,m_1:bitstring);
    (* a. decrypt *)
    let m'_1 = adec(m_1, sk_c) in
    (* b. deconstruct *)
    let (
        nonce'_0:bitstring, 
        nonce_1:bitstring, 
        pk'_c:PublicKey, 
        pk'_s:PublicKey,
        m'_uri:bitstring, 
        m_shape:bitstring,
        sig_shape:bitstring, 
        m_Aoffer:bitstring, 
        sig_Aoffer:bitstring,
        m_Brequest:bitstring,
        sig_Brequest:bitstring
        ) = m'_1 in
    (* c. check signatures *)
    if check(m_shape, sig_shape, pk_s) then
    if check(m_Aoffer, sig_Aoffer, pk_s) then
    if check(m_Brequest, sig_Brequest, pk_s) then
    (* d. check content *)
    if m'_uri = m_uri then
    if nonce'_0 = nonce_0 then
    if pk'_c = pk(sk_c) then
    (* e. create new message content *)
    let m_presentation:bitstring = m_shape in
    let m_Aagreement:bitstring = m_Aoffer in
    let m_Brequirement:bitstring = m_Brequest in
    new nonce_2:bitstring;
    (* f. sign files *)
    let sig_presentation:bitstring = sig(m_presentation, sk_c) in
    let sig_Aagreement_client:bitstring = sig(m_Aagreement, sk_c) in
    let sig_Brequirement:bitstring = sig(m_Brequirement, sk_c) in
    (* g. encrypt *)
    let m_2:bitstring = aenc((nonce_1, nonce_2, m_uri, m_presentation, sig_presentation, m_Aagreement, sig_Aagreement_client, m_Brequirement, sig_Brequirement), pk_s) in
    (* h. send new message *)
    event clientHasAgreed(m_presentation, m_Aagreement, m_Brequirement);
    event auth_ClientSendsLastMessageToServer(m_0, m_1, m_2);
    out(h,m_2);


    in(h,m_3:bitstring);
    (* a. decrypt *)
    let m'_3 = adec(m_3,sk_c) in
    (* b. deconstruct *)
    let (
        nonce'_2:bitstring, 
        m''_uri:bitstring, 
        m_resource:bitstring, 
        m_Bagreement:bitstring,
        sig_Bagreement:bitstring,
        m'_Aagreement:bitstring,
        sig'_Aagreement_client:bitstring,
        sig_Aagreement_server:bitstring
        ) = m'_3 in
    (* c. check signatures *)
    if check(m_Bagreement, sig_Bagreement, pk_s) then
    if check(m'_Aagreement, sig_Aagreement_server, pk_s) then
    (* d. check content *)
    if m''_uri = m_uri then
    if nonce'_2 = nonce_2 then
    if m_Bagreement = m_Brequirement then
    if m'_Aagreement = m_Aagreement then
    if sig'_Aagreement_client = sig_Aagreement_server then

    (* Client about to complete protocol! *)
    out(h, Client_Completes);
    if talksOnlyToHonest then
    (* event_at_the_very_end_of_role_R *)
    event clientReceivedResource(m_resource, m_Bagreement, m'_Aagreement);
    event auth_ClientCompletesProtocol(m_0, m_1, m_2, m_3) ;
    0.
(** END Client **)

(** START Server **)
let server(sk_s:SecretKey, pk_c:PublicKey, talksOnlyToHonest:bool) (* input ~ what the agent starts with in private*) =

    (* Receive data request (enc) *)
    in(h,m_0:bitstring);
    (* ab. decrypt deconstruct *)
    let (
        sig_K:bitstring, 
        m'_uri:bitstring, 
        nonce_0:bitstring, 
        m_uri:bitstring, 
        pk'_s:PublicKey, 
        pk'_c:PublicKey
        ) = adec(m_0, sk_s) in
    (* out-of-band - check if public *)
    (* c. check signatures *)
    (* d. check content *)
    if (pk'_s, pk'_c) = (pk(sk_s), pk_c) then
    if m'_uri = m_uri then
    (* e. create new message content *)
    new m_shape:bitstring;
    new m_Aoffer:bitstring;
    new m_Brequest:bitstring;
    new nonce_1:bitstring;
    (* f. sign message content *)
    let sig_shape:bitstring = sig(m_shape, sk_s) in
    let sig_Aoffer:bitstring = sig(m_Aoffer, sk_s) in
    let sig_Brequest:bitstring = sig(m_Brequest, sk_s) in
    (* g. encrypt *)
    let m_1:bitstring = aenc((nonce_0, nonce_1, pk_c, pk(sk_s), m_uri, m_shape, sig_shape, m_Aoffer, sig_Aoffer, m_Brequest, sig_Brequest), pk_c) in
    (* h. send new message *)
    event serverHasOffered(m_shape, m_Aoffer, m_Brequest);
    out(h, m_1);
    (* Sent out data usage offer (enc) *)


    in(h,m_2:bitstring);
    (* a. decyrpt *)
    let m'_2 = adec(m_2, sk_s) in
    (* b. deconstruct *)
    let (
        nonce'_1:bitstring, 
        nonce_2:bitstring, 
        m''_uri:bitstring, 
        m_presentation:bitstring, 
        sig_presentation:bitstring,
        m_Aagreement:bitstring,
        sig_Aagreement_client:bitstring,
        m_Brequirement:bitstring,
        sig_Brequirement:bitstring
        ) = m'_2 in
    (* c. check signatures *)
    if check(m_presentation, sig_presentation, pk_c) then
    if check(m_Aagreement, sig_Aagreement_client, pk_c) then
    if check(m_Brequirement, sig_Brequirement, pk_c) then
    (* d. check content *)
    if m''_uri = m_uri then
    if nonce'_1 = nonce_1 then
    if m_Aagreement = m_Aoffer then
    if m_Brequirement = m_Brequest then
    if m_presentation = m_shape then
    (* e. create new message content *)
    new m_resource:bitstring;
    let m_Bagreement:bitstring = m_Brequirement in
    (* f. sign message content *)
    let sig_Bagreement = sig(m_Bagreement, sk_s) in
    let sig_Aagreement_server = sig((m_Aagreement, sig_Aagreement_client), sk_s) in
    (* g. encyrpt *)
    let m_3:bitstring = aenc((nonce_2, m_uri, m_resource, m_Bagreement, sig_Bagreement, m_Aagreement, sig_Aagreement_client, sig_Aagreement_server), pk_c) in
    (* h. send new message *)
    event serverHasAgreed(m_resource, m_Bagreement, m_Aagreement);
    event auth_ServerSendsLastMessageToClient(m_0, m_1, m_2, m_3);
    out (h,m_3);

    (* Server about to complete the protocol *)
    out(h, Server_Completes);
    if talksOnlyToHonest then
    (* event_at_the_very_end_of_role_R *)
    event auth_ServerCompletesProtocol(m_0, m_1, m_2);
    0.
(** END Server **)

(* END process macros *)

(* "Do the processes complete?" - sanity check*)
query attacker(Client_Completes).
query attacker(Server_Completes).


(* Checking for "Agreement" *)

(*
event_at_the_very_end_of_role_R
==>
event_just_before_the_last_send_message_of_S
*)

query msg_0:bitstring, msg_1:bitstring, msg_2:bitstring, msg_3:bitstring;
    event(auth_ClientCompletesProtocol(msg_0,msg_1,msg_2,msg_3))
    ==>
    event(auth_ServerSendsLastMessageToClient(msg_0,msg_1,msg_2,msg_3)) .


query msg_0:bitstring, msg_1:bitstring, msg_2:bitstring;
    event(auth_ServerCompletesProtocol(msg_0,msg_1,msg_2))
    ==>
    event(auth_ClientSendsLastMessageToServer(msg_0,msg_1,msg_2)) .

(* 
event_client received resource 
==> event_server has agreed 
==> event_client has agreed 
==> event_server has offered  
*)

query resource:bitstring, policyA:bitstring, policyB:bitstring, shape:bitstring;
    inj-event(clientReceivedResource(resource, policyB, policyA))
    ==>
    (
        inj-event(serverHasAgreed(resource, policyB, policyA))
        ==>
        (
            inj-event(clientHasAgreed(shape, policyA, policyB))
            ==>
            inj-event(serverHasOffered(shape, policyA, policyB))
        )
    ) .



(* MAIN *)

free sk_e:SecretKey.

process (*use root process for setup *)
    (*declare secret keys*)
    new sk_c:SecretKey;
    new sk_s:SecretKey;
    (*advertise public keys*)
    out(h,pk(sk_c));
    out(h,pk(sk_s));
    (*let agents dance*)
    ( (
         !client   (sk_c, pk(sk_s), true)
       | !client   (sk_c, pk(sk_e), false)
       | !server   (sk_s, pk(sk_c), true)
       | !server   (sk_s, pk(sk_e), false)
       (* dishonest clients and dishonest servers are impersonated by "the attacker" *)
    ) )